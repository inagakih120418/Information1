# 基本６ 探索

# 配列から目的の値（探索値）を見つけることを「探索」といいます。

# 基本的な探索法には、
# 1. 線形探索
# 2. 二分探索
# の2種類があります。

# 例6-1 線形探索

"""

a = [57, 16, 99, 10, 45]       # 配列a の定義
n = len(a)                     # 変数n に配列a の長さ（要素の数）を代入

s = int(input("探索値の入力（[57, 16, 99, 10, 45]の内、どれか一つの数を入力） ")) # コンソールで配列a の中にある数を一つ入力する（入力した値は変数s に代入される）

for i in range(0, n, 1):       # 変数i を 0 から n まで 1 ずつ増やしながら繰り返す
    if a[i] == s:              # もし 配列a[i] が 変数s と等しい場合は以下を実行
        print(s, "は", i, "番目に存在します")
        break                  # for文やwhile文を強制終了する
        
"""

# 線形探索では、配列の添字が小さい順に探索値を探します。
# もっとも単純な探索法ですが、配列の後ろの方に探索値がある場合は繰り返しの処理が多くなる（動作が重くなる）デメリットもあります。


# 例6-2 二分探索

"""

a = [10, 16, 45, 57, 99]
n = len(a)

s = int(input("探索値の入力（[10, 16, 45, 57, 99]の内、どれか一つの数を入力） ")) # コンソールで配列a の中にある数を一つ入力する（入力した値は変数s に代入される）

lower = 0                                # 変数lower に0（配列a の添え字の最小値）を代入 ……下限値
upper = n - 1                            # 変数upper に n - 1（配列a の添字の最大値）を代入 ……上限値

while lower <= upper:                    # 条件を満たすまで以下を繰り返す
    median = int((lower + upper) / 2)    # 変数median に lower と upper の丁度真ん中になる値を代入（少数切り捨て） ……中央値
    if a[median] == s:                   # もし 「1) 配列a[median] と 変数s が等しい場合」は以下を実行
        print(s, "は", median, "番目に存在")
        break                            # for文やwhile文を強制終了する
    elif a[median] > s:                  # 1) ではなく、もし「2) 配列a[median]が 変数s より大きい場合」は以下を実行
        upper = median - 1
    else:                                # 1) でもなく、2) でもない場合は以下を実行
        lower = median + 1

"""

# 二分探索では、昇順または降順に並んでいるデータに対して、中央値を活用して探索値を探します。
# 線分探索よりも効率的に探索ができるメリットがありますが、データが昇順や降順に並んでいる必要があります。

# 仕組みとしては、探索値と配列の中央値を比較して「探索値 ＞ 中央値」なら、中央値以下に探索値が無いことが分かり、中央値以下を除外、
# 「探索値 ＜ 中央値」なら、中央値以上に探索値が無いことが分かり、中央値以上を除外します。
# 残った配列の範囲に生まれた新たな中央値を見て、上記の内容を繰り返し、探索値を見つけます。

# では、以上の内容を踏まえて、practice_6に取り組んでください。