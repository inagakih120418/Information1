# プログラミング学習の進め方 basic編


# 「basic_(数字).py」は、プログラムの処理を確認するファイルです。

# 学習内容ごとにサンプルプログラムが載っているので、動かしてみましょう。

# プログラムのはじめと終わりにある「"""」（ダブルクオーテーション）を消すとプログラムが動きます。

# *********************************************************************************************


# 基本1　順次構造

# 順次構造は「上から下に『順番に』プログラムを動かす」構造です。



# 例1-1 順次構造の簡単な例

"""

x = 10
y = 25

print(x + y)

"""

# 変数（例1-1で使った「ｘ」や「ｙ」のこと）の定義や、基本的な関数（例1-1で使った「print()」のこと）の使用時は、大体が順次構造です。

# 変数や関数も、プログラミングでは欠かせない要素です。

# 変数はよく「箱のようなもの」と説明されます。
# 変数という箱に、数字や文字列などを入れることができます。
# 変数の名前は自由に定義できて、以下のような形で表現されます。

# （自分で決めた変数の名前） = (変数の中に入れたい数字や文字列)

# 「=」の左辺で変数の名前を自由に入力し、右辺で変数の中に代入するものを書くことで、変数を定義できます。



# 関数とは、通常なら大量のプログラム文を書かないと実現できないプログラムや、何度も使うような処理を1行で済ませることができる便利なものです。

# 詳しいことはbasic_4で取り扱いますが、大きく分けて組み込み関数とユーザ定義関数の2種類があります。

# まずは最も基本的な組み込み関数である、「print()」関数を使ってみましょう。

# 使い方は、関数名と「()」を書いて、「()」の中に必要な「引数（ひきすう）」と呼ばれるものを入れるだけです。
# 引数は、関数の処理に必要な値のことで、使う関数によって、必要な引数の型や個数が変わります。
# 「print()」関数の場合は、()の中に一つ、数値か文字列、または変数を入れましょう。

# なお、文字列を変数や関数で扱う際は「"」（ダブルクオーテーション）又は「'」（シングルクォーテーション）で囲うようにしましょう



# 例1-2 変数と関数

"""

suzi = 15
number = 30
hello = "こんにちは"
world = "世界"

print("変数の中に入った数字を確認しよう\n")

print(suzi)
print(number)

print("\n引数の中で計算をすることもできます\n")

print(suzi + number)

print("\n文字同士を足しあわせると……\n")

print(hello + world)

print("\n文字と数字の間に「,」を入れることで、こんな風につなぎ合わせることもできます\n")

print("計算結果： ", suzi + number)

print("\nでも文字と数字は「+」で結合できません。以下のようにエラーが出ます\n")

print(suzi + hello)

"""


# 予備知識ですが、print関数の引数には戻り値がある関数も使えたりします。
# 戻り値についてもbasic_4で取り扱います。

# では、以上の内容を踏まえて、practice_1に取り組んでください。